{"version":3,"sources":["components/Splash.js","App.js","serviceWorker.js","index.js"],"names":["Splash","className","Component","excludedChannels","App","props","state","channels","selected","chooseChannel","bind","getChannelList","this","axios","get","res","channelList","data","Object","keys","filter","key","includes","forEach","mjh_master","name","setState","Canais","sort","a","b","channel","link","split","e","preventDefault","map","ch","NavDropdown","Item","Math","random","onClick","Container","fluid","style","backgroundColor","Navbar","bg","variant","NavbarBrand","Nav","id","title","Text","url","getSecureStreamingUrl","controls","playing","width","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAeeA,G,mLATP,OACI,yBAAKC,UAAU,gBACX,6E,GALKC,c,QCWfC,EAAmB,CACrB,QACA,QACA,QACA,QACA,QACA,QACA,SAmGWC,E,kDA9FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,GACVC,SAAU,MAEd,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAPP,E,0LAWTE,KAAKD,iB,+QAIOE,IAAMC,IAAI,+B,OAAtBC,E,OACFC,EAAcD,EAAIE,KAEtBC,OAAOC,KAAKH,GACPI,QAAO,SAAAC,GAAG,OAAIlB,EAAiBmB,SAASD,MACxCE,SAAQ,SAAAF,GAAG,cAAWL,EAAYK,MAEnCL,EAAY,SAASQ,WAAa,kEAClCR,EAAY,SAASS,KAAO,QAmBhCb,KAAKc,SAAS,CACVnB,SAAUoB,EAAOC,MAAK,SAACC,EAAGC,GACtB,OAAID,EAAEJ,KAAOK,EAAEL,MACH,EAERI,EAAEJ,KAAOK,EAAEL,KACJ,EAEJ,O,kJAKGM,GAElB,MAAO,YADMA,EAAQP,YAAcO,EAAQC,MAAMC,MAAM,MAAM,K,oCAInDC,EAAGH,GACbG,EAAEC,iBACFvB,KAAKc,SAAS,CACVlB,SAAUuB,M,+BAIR,IAAD,OACCxB,EAAWK,KAAKN,MAAMC,SAAS6B,KAAI,SAAAC,GAAE,OACvC,kBAACC,EAAA,EAAYC,KAAb,CAAkBlB,IAAKgB,EAAGN,SAAW,GAAAS,KAAKC,SAAwB,GAAIC,QAAS,SAACR,GAAD,OAAO,EAAKzB,cAAcyB,EAAGG,KAAMA,EAAGZ,SAEzH,OACI,kBAACkB,EAAA,EAAD,CAAWC,OAAK,EAACC,MAAO,CAACC,gBAAiB,UACtC,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACC,EAAA,EAAD,aACA,kBAACC,EAAA,EAAD,CAAKlD,UAAU,WACX,kBAACqC,EAAA,EAAD,CAAac,GAAG,kBAAkBC,MAAM,YACnC9C,IAGRK,KAAKN,MAAME,SACR,kBAACuC,EAAA,EAAOO,KAAR,2BACwB1C,KAAKN,MAAME,SAASiB,MAE9C,MAEN,kBAAC,IAAD,CAAaxB,UAAU,iBAAiBsD,IAAK3C,KAAKN,MAAME,SAAWI,KAAK4C,sBAAsB5C,KAAKN,MAAME,UAAY,GAAIiD,UAAQ,EAACC,SAAO,EAACC,MAAM,OACnIC,OAAO,SACK,OAAxBhD,KAAKN,MAAME,SAAoB,kBAAC,EAAD,MAAY,U,GA1F1CN,aCZE2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ef959412.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Splash.css';\n\nclass Splash extends Component {\n\n    render() {\n        return (\n            <div className=\"splashScreen\">\n                <span>Select a channel to start watching TV.</span>\n            </div>\n        );\n    }\n\n}\n\nexport default Splash;","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport NavbarBrand from \"react-bootstrap/NavbarBrand\";\nimport Nav from \"react-bootstrap/Nav\";\nimport axios from 'axios';\nimport ReactPlayer from \"react-player\";\nimport './App.css';\nimport Splash from \"./components/Splash\";\nimport Canais from \"./store/canais.json\";\n\n// these channels are excluded as their CORS policies don't allow them to load\nconst excludedChannels = [\n    \"tv.37\",\n    \"tv.58\",\n    \"tv.21\",\n    \"tv.36\",\n    \"tv.49\",\n    \"tv.63\",\n    \"tv.56\"\n];\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            channels: [],\n            selected: null\n        };\n        this.chooseChannel = this.chooseChannel.bind(this);\n        this.getChannelList = this.getChannelList.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.getChannelList();\n    }\n\n    async getChannelList() {\n        const res = await axios.get('https://i.mjh.nz/nz/tv.json');\n        let channelList = res.data;\n// console.log(JSON.stringify(channelList));\n        Object.keys(channelList)\n            .filter(key => excludedChannels.includes(key))\n            .forEach(key => delete channelList[key]);\n        \n            channelList[\"tv.28\"].mjh_master = \"https://psrv.io:80/live/AlexandreMarcheti/6qkLNbmC3x/18858.m3u8\"\n            channelList[\"tv.28\"].name = \"teste\"\n            // channel: 25\n            // description: \"New Zealand's very own Christian television network, catering for all ages and stages of life\"\n            // hls: true\n            // img_mod: \"1431989087980+1200\"\n            // logo: \"http://i.mjh.nz/nz/images/tv.7.png\"\n            // mjh_master: \"http://i.mjh.nz/nz/tv.7.m3u8\"\n            // name: \"Shine TV\"\n\n       \n            // channelList.teste = {\"channel\":2,\"description\":\"aaaaa\",\"headers\":{\"Referer\":\"%20\",\"Seekable\":\"0\",\"User-Agent\":\"FMLE/3.0 (compatible; FMSc/1.0)\",\"X-Forwarded-For\":\"202.89.4.222\"}\n// {caption:\"A&E FHD\", link: \"http://psrv.io:80/live/AlexandreMarcheti/6qkLNbmC3x/18858.m3u8\"},\n// {caption:\"A&E FHD [H265]\", link: \"http://psrv.io:80/live/AlexandreMarcheti/6qkLNbmC3x/22213.m3u8\"},\n// {caption:\"A&E HD\", link: \"http://psrv.io:80/live/AlexandreMarcheti/6qkLNbmC3x/18738.m3u8\"},\n// {caption:\"A&E SD\", link: \"http://psrv.io:80/live/AlexandreMarcheti/6qkLNbmC3x/18739.m3u8\"},\n// {caption:\"AMC FHD\", link: \"http://psrv.io:80/live/AlexandreMarcheti/6qkLNbmC3x/18857.m3u8\"},\n// {caption:\"AMC FHD [H265]\", link: \"http://psrv.io:80/live/AlexandreMarcheti/6qkLNbmC3x/22212.m3u8\"},\n\n\n        this.setState({\n            channels: Canais.sort((a, b) => {\n                if (a.name < b.name) {\n                    return -1;\n                }\n                if (a.name > b.name) {\n                    return 1;\n                }\n                return 0;\n            })\n        });\n    }\n\n    getSecureStreamingUrl(channel) {\n        const uri = (channel.mjh_master || channel.link).split('//')[1];\n        return 'https://' + uri;\n    }\n\n    chooseChannel(e, channel) {\n        e.preventDefault();\n        this.setState({\n            selected: channel\n        })\n    }\n\n    render() {\n        const channels = this.state.channels.map(ch => (\n            <NavDropdown.Item key={ch.channel || Math.random() * (100 - 50) + 50} onClick={(e) => this.chooseChannel(e, ch)}>{ch.name}</NavDropdown.Item>));\n\n        return (\n            <Container fluid style={{backgroundColor: 'black'}}>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <NavbarBrand>Test</NavbarBrand>\n                    <Nav className=\"mr-auto\">\n                        <NavDropdown id=\"channelDropdown\" title=\"Channels\">\n                            {channels}\n                        </NavDropdown>\n                    </Nav>\n                    {this.state.selected ?\n                        <Navbar.Text>\n                            Currently Playing: {this.state.selected.name}\n                        </Navbar.Text>\n                    : null}\n                </Navbar>\n                <ReactPlayer className=\"player-wrapper\" url={this.state.selected ? this.getSecureStreamingUrl(this.state.selected) : ''} controls playing width='100%'\n                             height='100%'/>\n                {this.state.selected === null ? <Splash/> : null}\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}